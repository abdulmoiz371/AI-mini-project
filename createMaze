
import operator
import sys

class Maze(object):
	"""Represents a two-dimensional maze, where each cell can hold a
	   single marker."""
	  
	def __init__(self):
		self.data = []


	def read_file(self, path):
		"""Read a maze text file and split out each character. Return
		   a 2-dimensional list where the first dimension is rows and
		   the second is columns."""
		maze = []
		myDict = {}
		f = open(path)
		for line in f.readlines():
			wholeLine = line.replace('\n', "")  #Separate each line by \n
			wholeLineAsArray = list(wholeLine)
			maze.append(wholeLineAsArray)

		f.close()

		
		print((maze))
		return maze

	def remade_graph(self, maze):
		print(list(maze))


	def find_start(self, maze):

		# number = len(maze)
		# print(number)
		pLocation = []
		for line in range(0, len(maze)):
		 	for character in range(0, len(maze[line])):
		 		if maze[line][character] == 'P':
		 			pRow = line
		 			pColoumn = character
		 			pLocation = [pRow, pColoumn]
		 			print(pLocation)

		return pLocation		

	def dfs(self, maze, start):
		
		print('we are in dfs')
		visited = set()
		stack = [start]
		vertex = ()

		while stack:
			vertex = stack.pop()
			print(vertex)
			#if vertex not in visited:
			#	print('inside vistited')
			#	visited.add(vertex)


		print('About to levae dfs')	
		return (visited)			

	# def dfs(self, maze, start):
    	
 #    	visited = set()
 #    	stack = [start]
    
 #    	while stack:

 #        	vertex = stack.pop()

 #        	if vertex not in visited:
 #            	visited.add(vertex)
 #            	stack.append(maze[vertex])

 #    	return visited

	 # {'E', 'D', 'F', 'A', 'C', 'B'}
# nodes = new Node[matrix.length][matrix[0].length]; //instance variable

# for ( int row = 0; row < matrix.length; row++ )
# {
#   for ( int col = 0; col < matrix[row].length; col++ )
#   {
#     char type = matrix[row][col];
#     if ( type != '#' )
#     {
#       Node n = new Node();
#       nodes[row][col] = n; //constructor to determine type of node
#       if ( type == 'S' )
#         startNode = n;
#       else if ( type == 'E' )
#         endNode = n;

#       findNeighbors(row, col); //assuming nodes and matrix variables are instance variables
#     }
#     else
#       nodes[row][col] = null;
#   }
# }

# class Graph(object):


# 	goalState = null

#     def __init__(self, graph_dict=None):
#         """ initializes a graph object 
#             If no dictionary or None is given, 
#             an empty dictionary will be used
#         """
#         if graph_dict == None:
#             graph_dict = {}
#         self.__graph_dict = graph_dict

#     def vertices(self):
#         """ returns the vertices of a graph """
#         lengthRow = len()
#         nodes = {}
#         for keyLength in self.__graph_dict.keys()
#         	lengthRow = len(keyLength)
#         	for character in range(0,lengthRow)
#         		if character == '%'
#         			continue
#         		elif character == ''
        				
#         		elif character == 'P'
#         			goalState = 

#         return list(self.__graph_dict.keys())

#     def edges(self):
#         """ returns the edges of a graph """
#         return self.__generate_edges()

#     def add_vertex(self, vertex):
#         """ If the vertex "vertex" is not in 
#             self.__graph_dict, a key "vertex" with an empty
#             list as a value is added to the dictionary. 
#             Otherwise nothing has to be done. 
#         """
#         if vertex not in self.__graph_dict:
#             self.__graph_dict[vertex] = []

#     def add_edge(self, edge):
#         """ assumes that edge is of type set, tuple or list; 
#             between two vertices can be multiple edges! 
#         """
#         edge = set(edge)
#         (vertex1, vertex2) = tuple(edge)
#         if vertex1 in self.__graph_dict:
#             self.__graph_dict[vertex1].append(vertex2)
#         else:
#             self.__graph_dict[vertex1] = [vertex2]

#     def __generate_edges(self):
#         """ A static method generating the edges of the 
#             graph "graph". Edges are represented as sets 
#             with one (a loop back to the vertex) or two 
#             vertices 
#         """
#         edges = []
#         for node in self.__graph_dict:
#             for neighbour in self.__graph_dict[node]:
#             	if neighbour == '.'
#             		edges.append({node, neighbour})
#                 elif neighbour == '%'
#                 	continue
#             	elif neighbour == ''		
#                 	edges.append({node, neighbour})

                	
#         return edges

#     def __str__(self):
#         res = "vertices: "
#         for k in self.__graph_dict:
#             res += str(k) + " "
#         res += "\nedges: "
#         for edge in self.__generate_edges():
#             res += str(edge) + " "
#         return res



    	
if __name__ == '__main__':
	createMaze = Maze()
	input_file = sys.argv[1]
	print (input_file)
	print ("The maze is ")
	TDArray = createMaze.read_file(input_file)
	# createMaze.remade_graph(TDArray)
	location = createMaze.find_start(TDArray)
	print(location)
	array = createMaze.dfs(TDArray, location)
	print(array)
	# graph = Graph(mazearray)
	# print("Vertices of graph:")
	# print(graph.vertices())

	# print("End of file")

	# print("Edges of graph:")
	# print(graph.edges())

	# print("Add vertex:")
	# graph.add_vertex("z")

	# #print("Vertices of graph:")
	# print(graph.vertices())

	# print("Add an edge:")
	# graph.add_edge({"a","z"})

 #    #print("Vertices of graph:")
 #    print(graph.vertices())

	# print("Edges of graph:")
	# print(graph.edges())

	# print('Adding an edge {"x","y"} with new vertices:')
	# graph.add_edge({"x","y"})

	# print("Vertices of graph:")
	# print(graph.vertices())

	# print("Edges of graph:")
	# print(graph.edges())
